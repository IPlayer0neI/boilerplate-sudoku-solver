const chai = require("chai");
const chaiHttp = require('chai-http');
const assert = chai.assert;
const server = require('../server');

const puzzles = require("../controllers/puzzle-strings.js").puzzlesAndSolutions;
const puzzleTest = puzzles[0][0];
const puzzleTestArray = puzzleTest.split("");
const puzzleTestSolution = puzzles[0][1];

chai.use(chaiHttp);

suite('Functional Tests', () => {
  suite("solve tests", function(){
    test("Solve valid", function(done){
      chai
        .request(server)
        .post("/api/solve")
        .send({puzzle: puzzleTest})
        .end(function(err, res){
          let solution = JSON.parse(res.text).solution;
           
          assert.equal(res.status, 200);
          assert.equal(solution, puzzleTestSolution);
          done();
        });
    });

    test("Solve no puzzle field", function(done){
        chai
          .request(server)
          .post("/api/solve")
          .send({})
          .end(function(err, res){
            let error = JSON.parse(res.text).error
            
            assert.equal(res.status, 200);
            assert.equal(error, "Required field missing");
            done();
          });
      });

    test("Solve invalid characters ", function(done){
      let puzzleInvalid = Array.from(puzzleTestArray);
      puzzleInvalid[0] = "a"
      chai
        .request(server)
        .post("/api/solve")
        .send({puzzle: puzzleInvalid.join("")})
        .end(function(err, res){
          let error = JSON.parse(res.text).error

          assert.equal(res.status, 200);
          assert.equal(error, "Invalid characters in puzzle");
          done();
        });
      });

    test("Solve invalid length", function(done){
      let puzzleInvalid = Array.from(puzzleTestArray);
      puzzleInvalid.pop();
      chai
        .request(server)
        .post("/api/solve")
        .send({puzzle: puzzleInvalid.join("")})
        .end(function(err, res){
          let error = JSON.parse(res.text).error;
  
          assert.equal(res.status, 200);
          assert.equal(error, "Expected puzzle to be 81 characters long");
          done();
        });
      });

    test("Solve invalid puzzle", function(done){
      let puzzleInvalid = Array.from(puzzleTestArray);
      puzzleInvalid[1] = "1";
      chai
        .request(server)
        .post("/api/solve")
        .send({puzzle: puzzleInvalid.join("")})
        .end(function(err, res){
          let error = JSON.parse(res.text).error;
    
          assert.equal(res.status, 200);
          assert.equal(error, "Puzzle cannot be solved");
          done();
        });
     });
   });

   suite("Checks teste", function(){
     test("Check all fields", function(done){
        chai
          .request(server)
          .post("/api/check")
          .send({puzzle: puzzleTest, coordinate: "a1", value: "1"})
          .end(function(err, res){
            let valid = JSON.parse(res.text).valid;
      
            assert.equal(res.status, 200);
            assert.isTrue(valid);
            done();
          });
       });

       test("Check one conclict", function(done){
        let oneConflict = Array.from(puzzleTestArray);
        oneConflict[6] = "1"
        chai
          .request(server)
          .post("/api/check")
          .send({puzzle: oneConflict.join(""), coordinate: "a1", value: "1"})
          .end(function(err, res){
            let conflict = JSON.parse(res.text).conflict;
      
            assert.equal(res.status, 200);
            assert.equal(conflict.length, 1);
            done();
          });
       });

       test("Check one conclict", function(done){
        let twoConflict = Array.from(puzzleTestArray);
        twoConflict[6] = "1"
        twoConflict[2]
        chai
          .request(server)
          .post("/api/check")
          .send({puzzle: oneConflict.join(""), coordinate: "a1", value: "1"})
          .end(function(err, res){
            let conflict = JSON.parse(res.text).conflict;
      
            assert.equal(res.status, 200);
            assert.equal(conflict.length, 1);
            done();
          });
       });
   });
});

